class Solution {
    Stack<String> st= new Stack<>();
    String ops="+-*/"; int tot=0;
    public int evalRPN(String[] tokens) {
        if(tokens.length==1)
            return Integer.parseInt(tokens[0]);
        for(int i=0;i<tokens.length;i++)
        {
            if(ops.indexOf(tokens[i])==-1)
            st.push(tokens[i]);
            else
            {
               String s=tokens[i]; 
        int a=Integer.parseInt(st.pop());
         int b=Integer.parseInt(st.pop());
        int c=0;
        if(s.equals("+"))
        {
            c=a+b;
        }
        else if(s.equals("-"))
        {
            c=b-a;
        }
        else if(s.equals("/"))
        {
            c=b/a;
        }
        else
        {
            c=a*b;
        }
            st.push(Integer.toString(c));               
        }
    }
        return Integer.parseInt(st.pop());
    }
}
//used stack as we need to calculate as we get an operand in that order and push back and at the end return the result.


ques-
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.

 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
