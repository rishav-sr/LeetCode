class Solution {
    public void rotate(int[] nums, int k) {
    k=k%nums.length;
        
        int f=nums.length-k;
        help(nums,0,f-1);
        help(nums,f,nums.length-1);
        help(nums,0,nums.length-1);
        
    }
    public void help(int arr[],int l,int r)
    {
        if(arr.length<=0 ||l==r)
            return;
        while(l<r)
        {
            arr[l]=arr[l]^arr[r];
            arr[r]=arr[l]^arr[r];
            arr[l]=arr[l]^arr[r];
            l++;r--;
        }
    }
}

//rotate 1st part of array , rotate 2nd part of array, rotate the complete array
//xor has been used to eliminate use of third variable.
Given a 2D integer array matrix, return the transpose of matrix.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.



 

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]
Example 2:

Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
-109 <= matrix[i][j] <= 109
