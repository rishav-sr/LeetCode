class Solution {
    public static int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet= new HashSet<>();
        boolean present=false;
        for(String s:wordList)
        {
        	 wordSet.add(s);
        	 if(endWord.equals(s))
        		 present= true;
        }
        if(present==false)
        	return 0;
        Queue<String> queue= new LinkedList<>();
        int depth=0,lsize=0,count=-1;
        queue.add(beginWord);
       
        while(!queue.isEmpty())
        {
        	lsize=queue.size(); depth++;
        	
        	while(lsize-->0)
        	{
        		StringBuilder temp=new StringBuilder(queue.poll());
        	for(int i=0;i<beginWord.length();i++)
        	{
        		StringBuilder temp2=new StringBuilder(temp);
        		for(char ch='a';ch<='z';ch++)
            	{
        			if(ch==temp2.charAt(i))
        				continue;
        			temp2.setCharAt(i, ch);
        			String t=temp2.toString(); 	
        			if(wordSet.contains(t))
            		{
        				if(t.equals(endWord))
        				{
        					count++;    
        					return depth+1;
        				}
            			queue.add(t);
            			wordSet.remove(t);              			
            		}            		
            	} 		
        		}
        	}
       }
        if(count!=-1)
        return depth+1;
        else
            return 0;
    }
}

// we started by replacing the index 1- length of string with a-z and finding in the set, if we could find any such word then put that
in queue and again repeat for that. We used BFS to solve this.


//question
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
