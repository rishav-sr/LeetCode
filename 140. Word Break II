class Solution {
    Trie trie= new Trie();
    String t="";
     List<String> result= new ArrayList<>();
    public List<String> wordBreak(String s, List<String> wordDict) {   
        
        
        wordDict.forEach(trie::insert);
        
        for(int i=1;i<=s.length();i++)
        {
            if(trie.search(s.substring(0,i))>0)
            {
                 
            solve(s,s.substring(0,i),i);  
               
        }
        }
        return result;
    }
    public void solve(String s,String st,int i)
    {
        if(s.length()==i)
        {
            result.add(st);
            return;
        }
        st+=" ";
        for(int j=i+1;j<=s.length();j++)
        {
            if(trie.search(s.substring(i,j))>0)
                solve(s,st+s.substring(i,j),j);
        }
    }
}

class Trie{
    TrieNode root;
    public Trie(){
        this.root=new TrieNode();
    }
    public int search(String s)
    {
        TrieNode current= root;
        for(int i=0;i<s.length();i++)
        {
            if(current==null)
                return 0;
            current=current.next(s.charAt(i));
        }
        if(current==null)
                return 0;
        else
        return current.terminate;
        
    }
    public void insert(String s)
    {
        TrieNode current= root;
        for(int i=0;i<s.length();i++)
        {
            if(current.trieNode[s.charAt(i)-'a']==null)
                current.trieNode[s.charAt(i)-'a']=new TrieNode();
            current=current.next(s.charAt(i));
        }
        current.terminate++;
    }
}
class TrieNode{
    int terminate;
    TrieNode[] trieNode= new TrieNode[26];
    public TrieNode next(char ch)
    {
        return trieNode[ch-'a'];
    }
}


//in this start by slicing string by one position, ad soon as you get it in trie, recursively call solve func with the reamining string and keep adding in st.
the value of St variale will egt added to list when we reach the end i.e all possible partition were made.

//question-
Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
Example 2:

Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
