class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
       int n=s.length();
        boolean arr[]= new boolean[n+1];
        arr[0]=true;int maxlen=0;
        for(String se:wordDict)
            maxlen=Math.max(maxlen,se.length());
        for(int i=0;i<=s.length();i++)
        {
            for(int j=i-1;j>=0;j--)
            {
                if(i-j>maxlen)
                    continue;
                if(arr[j]&&wordDict.contains(s.substring(j,i)))
                {
                    arr[i]=true;
                    break;
                }
            }
        }
        return arr[n];
    }
}

in this we are extracting string in below pattern-
i | j
0  -1
1 | 0
2 | 1,2
2 | 0,2
3 | 2-3
3 | 1-3
3 | 0-3
So this way each letter and its previous will be taken and checked in dict and assigning the postion as 1 to know till there was a found word and if complete word 
is there then last position of array is true
tweak- we are checking max len of word in dict, so we could not check those words which are greater than length of words in dict.

ques-
Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
